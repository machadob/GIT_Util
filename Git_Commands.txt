Git configuration:

vi ~/.gitignore_global
git config --global core.excludesfile ~/.gitignore_global

Managing Credentials on windows:
Open the windows credential manager (search for credential manager)
Update the password.
If you need to add a new entry run the git command:
git config --global credential.helper manager
After running the command do a git clone, fetch or pull and you will be prompted for a new password.
To manually create an entry, use the following format for the URL:
git:https://user@machine

To ignore a folder, add the following line to the .gitignore file:
node_modules/  //This will ignore the folder node_modules and its contents any where it exists in the source tree.

// To create git ignore files for various languages and tools use the following URL:
https://www.gitignore.io

//Paths
git config --show-origin user.name // Show the path of the config file where user.name is configured

//Display Config value
git config user.name  // local scope is default
git config --global user.name // For global scope

//Unset config
git config --unset --<scope> user.name
e.g. git config --unset --global user.name

//List configs
git config --list //list all configs

//List configs in a scope
git config <scope>  --list // Scope is local, global or system
e.g. git config --local  --list // List all configs in the local scope
 

Alias:
  git config alias.st status
  git config --global alias.lg "log --pretty=oneline --graph --decorate --all"
  git config alias.st "status -s"
  git log --oneline --decorate --all --graph
  git remote show origin (Find the remote repository URLs)
  
Search:
  git log --grep Hello --oneline --all // Search commit messagesfor Hello.
  git log --grep Hello -i --oneline --all // Search commit messages for Hello. ignore case.
  git log -Shello -- /a/b  // (Pickaxe search) Search commit contents for hello in folder /a/b.
  git log -i -Shello -- /a/b  // (Pickaxe search) Search commit contents for hello in folder /a/b. ignore case.
  git rev-list --all | xargs git grep <regular expression> // Search content alternate way.
  git grep <regular expression> // Search working tree.
  git grep -e <regular expression> [--or] -e <regular expression> // Search working tree with more than one reg ex.
  git grep <regular expression> $(git rev-list --all) // Search all commits withe reg ex.
  git log --follow -- filename. //List all commits that changed a particular file.
  git log --diff-filter=A -- my.txt // Find when a file was first added. : --diff-filter=[(A|C|D|M|R|T|U|X|B)…​[*]] for first Added,Copied, Deleted etc.
  git log my.java // Find the last commit that modified a file.
  git diff-tree --no-commit-id --name-only -r 8a31173bc // List all files in a commit. 
  git log --all -- path // List all commits for a file.
  git log -S 'search test' --source --all // Find the commit that first introduced the string 'search test'.
  
Restoring files:
 git restore .   //Restore all file in the current directory.
 git restore --staged test.java // Restore index to match HEAD.
 git restore --source=HEAD --staged --worktree test.java // Restore test.java to index and working tree from HEAD.
 git restore --source=HEAD~2 --staged --worktree test.java // Restore test.java to index and working tree from HEAD~2
 git restore '*.java' // Restore all java files to match the version in the index
 git restore :/ // Restore working tree.
 git restore --source master~4 test.java // Restore test.java to 4 revisions back
  
Finding changes:
  git merge-base <ref>
  git rev-parse <ref>
  git ls-files <options>
  git diff --name-only ref1 ref2
  git diff ref1..ref2
  -- Following three are equivalent. Commits reachable from B but not from A.
  git log refA..refB
  git log ^refA refB
  git log refB --not refA
  -- Use bisect command to do a binary search on the commits.
  git bisect start
  git bisect bad
  git bisect good 0

Configure Merge/Diff Tools (example with kdiff3):
  git config --global --add merge.tool kdiff3
  git config --global --add mergetool.kdiff3.path "C:/Program Files/KDiff3/kdiff3.exe"
  git config --global --add mergetool.kdiff3.trustExitCode false

  git config --global --add diff.guitool kdiff3
  git config --global --add difftool.kdiff3.path "C:/Program Files/KDiff3/kdiff3.exe"
  git config --global --add difftool.kdiff3.trustExitCode false

  
Common Workflow:
  git clone URL
  git add .  (Add all files to staging area)
  git add --interactive (Start a interactive add session)
  git commit -m "comment" (Commit changes in staging to the local repo)
  git commit --amend -m "New commit message" (Ammend the last commit with a new comment)
  git checkout foo.txt (Abort changes in working area for file foo.txt)
  git checkout . (Abort changes in working area for all files)
  git reset -- foo.txt (Abort changes in staging area for file foo.txt)
  git reset . (Abort changes for all files in the staging area)
  git reset --hard HEAD~1 (Undo last commit)
  git reset --hard 0d1d7fc32 (Go to a previous commit. The later commits are lost)
  git revert HEAD (Revert the previous commit)

  git rm file1.txt followed by  git commit -m "remove file1.txt" (Remove file1.txt from git repo)
  git rm --cached file1.txt followed by git commit -m "remove file1.txt" (Remove file1.txt from git repo, but keep in workdir)

  git remote (List all remotes)
  git config --get remote.origin.url (Get the remote URL from which this repo was cloned)
  git checkout -b branch_name  (Create local branch)
  git checkout mybranch (switch to mybranch)
  git checkout origin/master (Checkout the remote tracking branch on the local machine)
  git branch branch_name sha1_of_commit (Create branch from a commit)
  git checkout -b mybranch 0d1d7fc32 (Create a branch mybranch on commit 0d1d7fc32 and checkout the branch) 
  git checkout 0d1d7fc32 (Checkout specific commit. Will be headless)
  git branch -a (List all remote branches)
  git branch -d <mybranch> (Delete local branch mybranch)
  git branch -D <branch> (Force delete the specified branch, even if it has unmerged changes.)
  git branch -m <mybranch> (Rename the current branch to <mybranch>.)
  git fetch (Fetch the latest changes and branches from remote origin)
  git fetch <remote> (Fetch all of the branches from the repository)
  git fetch <remote> <branch> (Same as the above command, but only fetch the specified branch.)
  git fetch --all (A power move which fetches all registered remotes and their branches)
  git fetch --dry-run (The --dry-run option will perform a demo run of the command.)
  git merge origin/master (Merge the remote cached branch to the local branch -- fetch changes before merge)
  git merge mybranch --allow-unrelated-histories (merge unrelated branche mybranch with different history)
  git merge --abort  (Abort a merge)
  git pull  (git fetch <remote> followed by git merge origin/<current-branch>)
  git pull origin master
  git pull --rebase <remote> (Same as the previous pull but will rebase instead of merge)
  git pull origin master --allow-unrelated-histories (
  git push <remote-name> <branch-name> (Create remote branch by pushing a local branch)
  git push --set-upstream origin new   (Push the new branch, set local branch to track the new remote)
  git push <remote_name> --delete <branch_name> (Delete remote branch e.g. git push origin --delete crazy-experiment)
  git rebase master // Rebase the current branch onto master
  
  git difftool (Launch the git diff tool)
  git diff myfile.txt (Diff file in working dir and repo)
  git diff --cached myfile.txt (Diff file in staging and repo)
 
Revert the previous commit:
  git revert HEAD
  git commit
  
Revert the changes from previous 3 commits without making commit:
  git revert --no-commit HEAD~3..
  
Amend:
  git commit --amend
  git commit --amend --no-edit
  git commit --amend -m "New commit message"

Rebase:
git rebase master // Rebase the current branch onto master
git rebase --continue //Continue Rebase
git rebase --abort  //Abort Rebase

Stash:
  git stash
  git stash save "stash name"
  git stash list
  git stash pop
  git stash apply
  git stash apply stash@{2}
  git stash drop stash@{2}

Delete remote tags:
  git push --delete origin tagname
  git push origin :tagname
  
Push tag to remote:
  git push origin tagname
  git push origin tag_a //Push just tag_a to origin
  
Rename tag:
  git tag new old
  git tag -d old
  git push origin :refs/tags/old
  git push --tags
  
List all remote:
 git remote
 
Add a additional remote reposirory:
  git remote add myorigin git@github.com:user/repo.git
 
Create the branch on your local machine and switch in this branch:
  git checkout -b branch_name
Create branch from commit:
  git branch branch_name sha1_of_commit
  
Push the branch to remote:
  git push origin branch_name
  
Rename other branch:
  git branch -m old new
Rename current branch:
  git branch -m new
  
Rename remote branch:
  git branch -m old new               # Rename branch locally    
  git push origin :old                 # Delete the old branch    
  git push --set-upstream origin new   # Push the new branch, set local branch to track the new remote
  
Delete a branch:
  git branch -D the_local_branch
  git push origin :the_remote_branch
  
 Undo last commit:
  git reset --hard HEAD~1
  
 Squash last n commits into one commit:
  git rebase -i HEAD~5
  git reset --soft HEAD~5
  git add .
  git commit -m "Update"
  git push -f origin master
  
 Alias
 git config --global alias.lg "log --pretty=oneline --graph --decorate --all"
git config --global alias.l  "log --oneline --graph"
git config --global alias.co  "checkout"
git config --global alias.cd  "checkout develop"
git config --global alias.ss  "status -s"
git config --global alias.s  "status"
git config --global alias.ci  "commit -v"
git config --global alias.c  "commit"
git config --global alias.p  "pull"
git config --global alias.pu  "push"
git config --global alias.f  "fetch"
git config --global alias.b  "branch"
git config --global alias.br  "branch -r"
git config --global alias.a  "add ."
git config --global alias.m  "merge --no-ff --no-commit"
git config --global alias.md  "merge develop"
git config --global alias.ma  "merge --abort"
git config --global alias.mt  "mergetool"
git config --global alias.r  "remote -v"
git config --global alias.d  "diff"
